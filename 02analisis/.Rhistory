)
s2_products <- s2_list(
spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",       # servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sf::st_sfc(area2)
sf::st_as_sfc(area2)
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",       # servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
library(sf)
library(ggplot2)
library(terra)
library(dplyr)
library(lubridate)
library(sen2r)
check_gcloud()
sen2r::check_gcloud()
sen2r::check_gcloud()
# cargar archivo shp de area de estudio
area_estudio_sf <- st_read("../01entrada/cuencaAconcagua.shp") # cuenca de Aconcagua
# area_estudio_sf <- st_read("../01entrada/.shp") # cuenca de Aconcagua
# transformacion a sistema de coordenadas 4326 wgs 84
area_estudio_sf <- st_transform(area_estudio_sf, crs = 4326)
# plot(area_estudio_sf)
area2 <- area_estudio_sf[,"NOM_CUEN"]
names(area2) <- c("Aconcagua", "geometry")
plot(area2)
ae_extent <- st_bbox(area2)
ae_extent
# fecha de inicio
fecha_inicio <- "2020-06-01"
# fecha de termino
fecha_fin <- "2020-12-31"
fechas_sentinel <- tibble(
fecha_adquisicion = seq(as.Date(fecha_inicio), as.Date(fecha_fin), by = "week")
) %>%
sample_frac(1) %>% # Selecciona aleatoriamente el 20% de los días para simular adquisiciones
arrange(fecha_adquisicion) %>%
mutate(
disponibilidad = "Imagen Disponible",
# Simular algunas fechas con "nubes" o no disponibles para el análisis
tipo = sample(c("Clara", "Nubes/No Usable"), size = n(), replace = TRUE, prob = c(0.8, 0.2))
)
grafico_sentinel <- ggplot(fechas_sentinel, aes(x = fecha_adquisicion, y = 1)) +
geom_point(aes(color = tipo), size = 2, alpha = 0.8) +
geom_vline(xintercept = as.numeric(as.Date(fecha_inicio)), linetype = "dashed", color = "grey50") +
geom_vline(xintercept = as.numeric(as.Date(fecha_fin)), linetype = "dashed", color = "grey50") +
annotate("rect",
xmin = as.Date("2015-01-01"), xmax = as.Date("2025-06-30"),
ymin = 0.5, ymax = 1.5, # Ajustar ymin/ymax para que el rectángulo abarque los puntos
fill = "lightblue", alpha = 0.2) +
# annotate("text",
# x = mean(c(as.Date("2015-01-01"), as.Date("2025-06-30"))),
# y = 1.6, label = "Periodo de estudio", color = "darkblue", size = 4, fontface = "bold") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + # Formato del eje X
scale_y_continuous(breaks = NULL) + # Eliminar etiquetas del eje Y
labs(
title = "Fechas de Adquisición de Imágenes Sentinel-2",
x = "Año",
y = NULL,
color = "Estado de la Imagen"
) +
theme_minimal() +
theme(
axis.text.y = element_blank(), # Quitar texto del eje Y
axis.ticks.y = element_blank(), # Quitar marcas del eje Y
panel.grid.major.y = element_blank(), # Quitar líneas de cuadrícula mayores del eje Y
panel.grid.minor.y = element_blank(), # Quitar líneas de cuadrícula menores del eje Y
plot.title = element_text(hjust = 0.5) # Centrar el título
)
print(grafico_sentinel)
# Definir el directorio de salida
output_dir <- "../03salida/"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
print("Buscando imágenes disponibles...")
check_sen2r_deps()
sen2r::is_gcloud_configured()
check_sen2r_deps()
install.packages("aria2")
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",       # servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sen2r::check_gcloud_connection()
sen2r::check_gdal()
sen2r::check_sen2r_deps()
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",       # servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sen2r::check_sen2r_deps()
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",       # servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sen2r::check_gcloud()
sen2r::check_gcloud(full_scan = )
sen2r::check_gcloud(full_scan = TRUE)
sen2r()
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
library(sf)
library(ggplot2)
library(terra)
library(dplyr)
library(lubridate)
library(sen2r)
sen2r::check_gcloud()
# cargar archivo shp de area de estudio
area_estudio_sf <- st_read("../01entrada/cuencaAconcagua.shp") # cuenca de Aconcagua
# area_estudio_sf <- st_read("../01entrada/.shp") # cuenca de Aconcagua
# transformacion a sistema de coordenadas 4326 wgs 84
area_estudio_sf <- st_transform(area_estudio_sf, crs = 4326)
# plot(area_estudio_sf)
area2 <- area_estudio_sf[,"NOM_CUEN"]
names(area2) <- c("Aconcagua", "geometry")
plot(area2)
ae_extent <- st_bbox(area2)
ae_extent
# fecha de inicio
fecha_inicio <- "2020-06-01"
# fecha de termino
fecha_fin <- "2020-12-31"
fechas_sentinel <- tibble(
fecha_adquisicion = seq(as.Date(fecha_inicio), as.Date(fecha_fin), by = "week")
) %>%
sample_frac(1) %>% # Selecciona aleatoriamente el 20% de los días para simular adquisiciones
arrange(fecha_adquisicion) %>%
mutate(
disponibilidad = "Imagen Disponible",
# Simular algunas fechas con "nubes" o no disponibles para el análisis
tipo = sample(c("Clara", "Nubes/No Usable"), size = n(), replace = TRUE, prob = c(0.8, 0.2))
)
grafico_sentinel <- ggplot(fechas_sentinel, aes(x = fecha_adquisicion, y = 1)) +
geom_point(aes(color = tipo), size = 2, alpha = 0.8) +
geom_vline(xintercept = as.numeric(as.Date(fecha_inicio)), linetype = "dashed", color = "grey50") +
geom_vline(xintercept = as.numeric(as.Date(fecha_fin)), linetype = "dashed", color = "grey50") +
annotate("rect",
xmin = as.Date("2015-01-01"), xmax = as.Date("2025-06-30"),
ymin = 0.5, ymax = 1.5, # Ajustar ymin/ymax para que el rectángulo abarque los puntos
fill = "lightblue", alpha = 0.2) +
# annotate("text",
# x = mean(c(as.Date("2015-01-01"), as.Date("2025-06-30"))),
# y = 1.6, label = "Periodo de estudio", color = "darkblue", size = 4, fontface = "bold") +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") + # Formato del eje X
scale_y_continuous(breaks = NULL) + # Eliminar etiquetas del eje Y
labs(
title = "Fechas de Adquisición de Imágenes Sentinel-2",
x = "Año",
y = NULL,
color = "Estado de la Imagen"
) +
theme_minimal() +
theme(
axis.text.y = element_blank(), # Quitar texto del eje Y
axis.ticks.y = element_blank(), # Quitar marcas del eje Y
panel.grid.major.y = element_blank(), # Quitar líneas de cuadrícula mayores del eje Y
panel.grid.minor.y = element_blank(), # Quitar líneas de cuadrícula menores del eje Y
plot.title = element_text(hjust = 0.5) # Centrar el título
)
print(grafico_sentinel)
# Definir el directorio de salida
output_dir <- "../03salida/"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
print("Buscando imágenes disponibles...")
check_sen2r_deps()
sen2r::is_gcloud_configured()
sen2r::check_gcloud_connection()
sen2r::check_gdal()
sen2r::check_sen2r_deps()
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
devtools::install_github("ranghetti/sen2r")
devtools::install_github("ranghetti/sen2r", force=TRUE)
install.packages("s2")
install.packages("s2")
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
install.packages("s2")
install.packages("absl_log")
install.packages("absl_log2")
install.packages("absl_log")
install.packages("absl_s2")
devtools::install_github("ranghetti/sen2r", force=TRUE)
install.packages("s2")
install.packages("~/Downloads/s2_1.1.9.tar.gz", repos = NULL, type = "source")
install.packages("s2")
devtools::install_github("ranghetti/sen2r", force=TRUE)
library(s2)
library(s2)
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sf::st_crs(area2)
st_crs(area2) <-  sf::st_crs(area2)
s2_products <- s2_list(
spatial_extent =  sf::st_as_sfc(area2),
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
s2_products <- s2_list(
spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
# area_estudio_sf <- st_read("../01entrada/.shp") # cuenca de Aconcagua
# transformacion a sistema de coordenadas 4326 wgs 84
area_estudio_sf <- st_transform(area_estudio_sf, crs = 4326)
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
as.Date(c(fecha_inicio, fecha_fin)
)
sen2r(
# gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01")
# list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
# path_l2a = safe_dir,
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01")
# list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
# path_l2a = safe_dir,
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01")
# list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
# path_l2a = safe_dir,
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01")
# list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
path_l2a = "../03salida/"
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01"),
# list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
path_l2a = "../03salida/"
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01"),
list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
# path_l1c = safe_dir,
path_l2a = "../03salida/"
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01"),
list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
path_l1c = "../03salida/l1c",
path_l2a = "../03salida/l2a"
# path_out = out_dir_3
)
sen2r(
gui = FALSE,
server = "gcloud",
step_atmcorr = "l2a",
# extent = system.file("extdata/vector/barbellino.geojson", package = "sen2r"),
extent = "../01entrada/cuencaAconcagua.shp",
# extent_name = "Barbellino",
timewindow = as.Date("2020-08-01"),
list_prods = c("TOA","BOA","SCL","OAA"),
# list_indices = c("NDVI","MSAVI2"),
# list_rgb = c("RGB432T", "RGB432B", "RGB843B"),
# mask_type = "cloud_medium_proba",
# max_mask = 80,
path_l1c = "../03salida/l1c",
path_l2a = "../03salida/l2a",
path_out = "../03salida/out"
)
sen2r::check_gcloud()
sen2r::check_gcloud_connection()
gcs_setup
gcs_setup()
install.packages("googleCloudStorageR")
gcs_setup()
library(googleCloudStorageR)
gcs_setup()
1
gcs_setup()
sen2r::check_gcloud()
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L1C",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L2A",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L2A",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
sen2r::check_gcloud()
sen2r::check_gcloud_connection()
library(sen2r)
library(s2)
s2_products <- s2_list(
spatial_extent =  area_estudio_sf,
# spatial_extent =  area2,
time_interval = as.Date(c(fecha_inicio, fecha_fin)),
time_period = "full",
# s2_levels = "l2a",        # Nivel de procesamiento: L2A (corregido atmosféricamente)
level = "L2A",
server = "gcloud",
# outformat = "GTiff",# servidor de busqueda
max_cloud = 100     # maximo 20 de nubes en la imagen completa
# online = TRUE            # Buscar en línea
)
